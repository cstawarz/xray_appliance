/* * Created on Jun 13, 2005 * */package Simulator;/** * @author Daniel Oreper * Created on Jun 13, 2005 *//** * @Holder of a fiducial collection. This class is needed to simulate wobble for a rotary stage. * Not meant to be used by any other class - considering making it a class private to RotaryStage. */ import javax.vecmath.Point3d;public class FiducialCollectionHolder extends TransformableObject{    private FiducialCollectionHolder(Point3d initCenter)    {        super(initCenter);    }        public static FiducialCollectionHolder BuildDefault(Point3d initCenter)	{    		FiducialCollectionHolder holder = new FiducialCollectionHolder((Point3d)initCenter.clone());    		holder.giveChildrenParents();    		return holder;	}        /**     * @effects:     *  the rotary stage encloses f, and henceforth any rotary stage movement moves     * f correspondingly     *      * @modifies: f this.fiducials     *      */    public void replaceFiducialCollection(FiducialCollection f)    {        this.removeChildren();    		this.addChild(f);    		//System.out.println(f);    		//TODO:check    		f.setParent(this);    }        protected FiducialCollection getFiducialCollection()    {        return (FiducialCollection)this.getChild(0);    }        protected void addFiducialCollection(FiducialCollection fc)    {        if(this.getNumberOfChildren()>0)        {            throw new RuntimeException("add collection to a hold that already holds one");        }        else        {            this.addChild(fc);            //TODO: check            fc.setParent(this);        }    }    	public void r1(double d)	{	    this.rotateAboutInitAxis1(d);	}		public void r2(double d)	{	    this.rotateAboutInitAxis2(d);	}		public void r3(double d)	{	    this.rotateAboutInitAxis3(d);	}		public void t1(double d)	{	    this.setInitTranslation1(d);	}		public void t2(double d) 	{	    this.setInitTranslation2(d);	}		public void t3(double d)	{	    this.setInitTranslation3(d);	}		public String toString()	{		String s = "";		s = s + "Fiducial Collection Holder: " +"\n";		s = s + super.toString();		s = s + "Children are: " +"\n";		FiducialCollection fids = getFiducialCollection();		s = s + fids.toString();		s = s + "\n";		return s;	}	//	public String tobjectProperties()//	{//	    String s = "";//	    s = s + "Fiducial Collection Holder";//	    s = s + super.tobjectProperties();//	    return s;//	}			//relatively shallow clone- fiducials are not cloned, just recreated	//approximately	public Object clone()	{	    FiducialCollectionHolder newFids = FiducialCollectionHolder.BuildDefault(this.getCenter());;	    newFids.set(this);	    return newFids;	}			public void set(FiducialCollectionHolder fc)	{	    super.set(fc);	    FiducialCollection fids = this.getFiducialCollection();	    fids.set(fc.getFiducialCollection());	}    /* (non-Javadoc)     * @see Simulator.TransformableObject#specialRecenter()     */    public void specialRecenter()    {        // TODO Auto-generated method stub            }        public double getFCT1()    {    		return this.getFiducialCollection().getTranslation1();    }        public double getFCT2()    {    		return this.getFiducialCollection().getTranslation2();    }    public double getFCT3()    {    		return this.getFiducialCollection().getTranslation3();    }        public double getFCR1()    {    		return this.getFiducialCollection().getRotation1();    }        public double getFCR2()    {    		return this.getFiducialCollection().getRotation2();    }        public double getFCR3()    {    		return this.getFiducialCollection().getRotation3();    }   }