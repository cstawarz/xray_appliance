/* * Created on Jun 7, 2005 * */package Simulator;import java.util.Iterator;import javax.vecmath.Point3d;/** * @author Daniel Oreper * Created on Jun 7, 2005 */public class FiducialCollection extends TransformableObject{    private FiducialCollection(Point3d initCenter)    {        super(initCenter);    }        public static FiducialCollection BuildDefault()	{    		FiducialCollection fids = new FiducialCollection(new Point3d(0,0,0));    		fids.giveChildrenParents();    		return fids;	}        /**     * @effects:     * If rotation == 0, f is added to the end of fiducials.     *  the rotary stage encloses f, and henceforth any rotary stage movement moves     * f correspondingly     *      * @modifies: f this.fiducials     *      */    public void addFiducial(Fiducial f)    {    		this.addChild(f);    		//TODO: check    		f.setParent(this);    }        //    public void addLightFiducial(LightFiducial f)//    {//    		this.addChild(f);//    		f.setParent(this);//    }            public void addDefaultFiducial(double x, double y, double z)    {        HeavyFiducial f = HeavyFiducial.BuildDefault(new Point3d(x,y,z));        addFiducial(f);    }            public void addDefaultLightFiducial(double x, double y, double z, double radius)    {        LightFiducial f = LightFiducial.BuildDefault(new Point3d(x,y,z));        f.setRadius(radius);//        addLightFiducial(f);        addFiducial(f);    }            public void addDefaultLightFiducial(double x, double y, double z)    {        LightFiducial f = LightFiducial.BuildDefault(new Point3d(x,y,z));        addFiducial(f);    }            public void empty()    {        this.removeChildren();    }    	//TODO: create an electrode class	public void addElectrode(HeavyFiducial f)	{	    	}		/**	 * @ return: iterator over modifiable view of fiducials... be very careful with this method!	 */	public Iterator getFiducials()	{		return this.getChildren();	}	/**	 * 	 * @return number of fiducials in rotary stage	 */	public int getNumberOfFiducials()	{		return getNumberOfChildren();	}	/**	 * @requires: fiducialIndex is less than number of fiducials, greater than 0	 * @modifies: this, fiducialIndexth fiducial in fiducials	 * @effects: fiducialIndxth fiducial translation from initial postion is set to x,y,z	 * thus the new postion is fiducial.initPosition +(x,y,z), rotated about rotary stage axis by rotation	 */	public void setFiducialTranslation(double x, double y, double z, int fiducialIndex)	{	    if ((fiducialIndex > getNumberOfFiducials()-1)||(fiducialIndex<0))	    {	        throw new RuntimeException("Bad index passed into Fiducialcollection.setFiducialTranslation");	    }		HeavyFiducial f = (HeavyFiducial) this.getChild(fiducialIndex);		f.setInitTranslation(x,y,z);		//f.setXDisplacement(x);		//f.setYDisplacement(y);		//f.setZDisplacement(z);	}		public void setLightFiducialPosition(double xCoordinate, 	        double yCoordinate,	        double zCoordinate, 	        int fiducialIndex)	{	    if ((fiducialIndex > getNumberOfFiducials()-1)||(fiducialIndex<0))	    {	        throw new RuntimeException("Bad index passed into Fiducialcollection.setFiducialTranslation");	    }		LightFiducial f = (LightFiducial) this.getChild(fiducialIndex);		f.setPosition(xCoordinate,yCoordinate,zCoordinate);		//f.setXDisplacement(x);		//f.setYDisplacement(y);		//f.setZDisplacement(z);	}		public void perturbLightFiducialPosition(double deltaX, 	        double deltaY,	        double deltaZ, 	        int fiducialIndex)	{	    if ((fiducialIndex > getNumberOfFiducials()-1)||(fiducialIndex<0))	    {	        throw new RuntimeException("Bad index passed into Fiducialcollection.setFiducialTranslation");	    }		LightFiducial f = (LightFiducial) this.getChild(fiducialIndex);		f.perturbPosition(deltaX, deltaY, deltaZ);	}		public void setLightFiducialRadius(double radius, int fiducialIndex)	{	    if ((fiducialIndex > getNumberOfFiducials()-1)||(fiducialIndex<0))	    {	        throw new RuntimeException("Bad index passed into Fiducialcollection.setFiducialRadius");	    }		LightFiducial f = (LightFiducial) this.getChild(fiducialIndex);		f.setRadius(radius);	}			//TODO: pass in Point3d?	public Point3d getFiducialLocation(int fiducialIndex)	{	    if ((fiducialIndex>getNumberOfFiducials()-1)||(fiducialIndex<0))	    {	        throw new RuntimeException("Bad Index pass into get Fiducial Location");	    }	    else	    {	        return this.getChild(fiducialIndex).getCenter();	    }	}	    	public Point3d getFiducialLocation(int fiducialIndex, Point3d center)	{	    if ((fiducialIndex>getNumberOfFiducials()-1)||(fiducialIndex<0))	    {	        throw new RuntimeException("Bad Index pass into get Fiducial Location");	    }	    else	    {	        this.getChild(fiducialIndex).getCenter(center);	        return center;	    }	}		public void r1(double d)	{	    this.rotateAboutInitAxis1(d);	}		public void r2(double d)	{	    this.rotateAboutInitAxis2(d);	}		public void r3(double d)	{	    this.rotateAboutInitAxis3(d);	}		public void t1(double d)	{	    this.setInitTranslation1(d);	}		public void t2(double d) 	{	    this.setInitTranslation2(d);	}		public void t3(double d)	{	    this.setInitTranslation3(d);	}		public String toString()	{		String s = "";		s = s + "Fiducial Collection: " +"\n";		s = s + super.toString();		s = s + "Children are: " +"\n";		Iterator iter = getFiducials();		while (iter.hasNext())		{		    TransformableObject to = (TransformableObject)iter.next();			s = s + to.toString();		}		s = s + "\n";		return s;	}	//relatively shallow clone- fiducials are not cloned, just recreated	//approximately	public Object clone()	{	    FiducialCollection newFids = FiducialCollection.BuildDefault();	    newFids.set(this);	    return newFids;	}		public void set(FiducialCollection fc)	{	    super.set(fc);	    this.empty();	    Iterator iter = fc.getFiducials();	    while(iter.hasNext())	    {	        LightFiducial f = (LightFiducial)iter.next();	        addFiducial((LightFiducial)f.clone());	    }	}	    public static void main(String[] args)    {        FiducialCollection fc = FiducialCollection.BuildDefault();        fc.addDefaultLightFiducial(1,2,3);        fc.setLightFiducialPosition(10,100,1000,0);        fc.r1(90);        System.out.println(fc.getFiducialLocation(0));    }    }