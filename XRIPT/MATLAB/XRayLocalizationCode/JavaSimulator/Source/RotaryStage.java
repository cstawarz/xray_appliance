package Simulator;/** * @OVERVIEW:  * This class represents a Rotary stage that holds fiducials within it, and rotates  * about some axis, rotating enclosed fiducials at the same time *    * It Extends TransformableObject and is self moving (to enable rotary stage rotation) *//** * @specfield rotationAxis: Vector3d * @specfield rotation: double rotaion about rotationAxis from original position * @specfield fiducials: collection fiducials held in the FiducialCollection  * @specfield center: Point3d center of rotation (inherited from TO) * @specfield electrode: Fiducial that is special *///TODO: add an electrode to this thing somehowimport java.util.*;import javax.vecmath.*;//import com.sun.rsasign.r;public class RotaryStage extends TransformableObject{	    //CONSTRUCTORS        //this constructor is private in order to give Fiducial children a fiducial collection parent,    //see T.O.    private RotaryStage(Point3d center)    {    		super(center);    		    		//this.setAxis1(new Vector3d(0,0,1)); //setting lone axis of rotation- no other axes are relevant    		//in rotary stage rotation    }        /**	 * @returns: new FC s.t.	 * FC.rotationAxis is Z Axis, 	 * FC.rotation = 0,	 * FC.initCenter = initCenter	 * FC.fiducials = empty collection	 * FC.electrode = null	 * 	 */    public static RotaryStage BuildDefault(Point3d initCenter)	{    		RotaryStage rot = new RotaryStage(initCenter);    		FiducialCollectionHolder fidsHolder = FiducialCollectionHolder.BuildDefault(initCenter);    		FiducialCollection fids2 = FiducialCollection.BuildDefault();    		fidsHolder.addFiducialCollection(fids2);    		rot.addChild(fidsHolder);    		rot.giveChildrenParents();    		return rot;	}            //TODO: make a non default constructor        /**     * @effects:     * If rotation == 0, f is added to the end of fiducials.     *  the rotary stage encloses f, and henceforth any rotary stage movement moves     * f correspondingly     * @modifies: f this.fiducials     *      */    protected FiducialCollectionHolder getFiducialCollectionHolder()    {        return (FiducialCollectionHolder)this.getChild(0);    }    	public void addFiducial(Fiducial f)    {	    FiducialCollectionHolder fids = getFiducialCollectionHolder();	    FiducialCollection fids2 = fids.getFiducialCollection();	    fids2.addFiducial(f);    }		public void addFiducial(double x, double y, double z)	{	    HeavyFiducial f = HeavyFiducial.BuildDefault(new Point3d(x,y,z));	    addFiducial(f);	}	//	public void addLightFiducial(LightFiducial f)//	{//	    FiducialCollectionHolder fids = getFiducialCollectionHolder();//	    FiducialCollection fids2 = fids.getFiducialCollection();//	    fids2.addLightFiducial(f);//	}		//TODO: create an electrode class	public void addElectrode(HeavyFiducial f)	{	    FiducialCollectionHolder fids = getFiducialCollectionHolder();	    FiducialCollection fids2 = fids.getFiducialCollection();	    fids2.addElectrode(f);	}		/**	 * @ return: iterator over modifiable view of fiducials... be very careful with this method!	 */	public Iterator getFiducials()	{	    FiducialCollectionHolder fids = getFiducialCollectionHolder();	    FiducialCollection fids2 = fids.getFiducialCollection();	    return fids2.getFiducials();	}		/**	 * @return rotation	 */	public double getRotaryRotationAngle()	{		//recalculate();	    FiducialCollectionHolder fids = getFiducialCollectionHolder();	    return fids.getRotation1();	}	/**	 * 	 * @return number of fiducials in rotary stage	 */	public int getNumberOfFiducials()	{	    FiducialCollectionHolder fids = getFiducialCollectionHolder();	    FiducialCollection fids2 = fids.getFiducialCollection();	    return fids2.getNumberOfChildren();	}		/**	 * @requires: fiducialIndex is less than number of fiducials, greater than 0	 * @modifies: this, fiducialIndexth fiducial in fiducials	 * @effects: fiducialIndxth fiducial translation from initial postion is set to x,y,z	 * thus the new postion is fiducial.initPosition +(x,y,z), rotated about rotary stage axis by rotation	 */	public void setFiducialTranslation(double x, double y, double z, int fiducialIndex)	{	    FiducialCollectionHolder fids = getFiducialCollectionHolder();	    FiducialCollection fids2 = fids.getFiducialCollection();	    fids2.setFiducialTranslation(x,y,z, fiducialIndex);	}		/**	 * @requires: fiducialIndex is less than number of fiducials, greater than 0	 * @modifies: this, fiducialIndexth fiducial in fiducials	 * @effects: fiducialIndxth fiducial translation from initial postion is set to x,y,z	 * thus the new postion is fiducial.initPosition +(x,y,z), rotated about rotary stage axis by rotation	 */	public void setLightFiducialPosition(double xCoordinate, 	        double yCoordinate, 	        double zCoordinate, 	        int fiducialIndex)	{	    FiducialCollectionHolder fids = getFiducialCollectionHolder();	    FiducialCollection fids2 = fids.getFiducialCollection();	    fids2.setLightFiducialPosition(xCoordinate,yCoordinate,zCoordinate, fiducialIndex);	}	public void perturbLightFiducialPosition(double deltaX, 	        double deltaY, 	        double deltaZ, 	        int fiducialIndex)	{	    FiducialCollectionHolder fids = getFiducialCollectionHolder();	    FiducialCollection fids2 = fids.getFiducialCollection();	    fids2.perturbLightFiducialPosition(deltaX,deltaY,deltaZ,fiducialIndex);	}		public void setLightFiducialRadius(double radius, int fiducialIndex)	{	    FiducialCollectionHolder fids = getFiducialCollectionHolder();	    FiducialCollection fids2 = fids.getFiducialCollection();	    fids2.setLightFiducialRadius(radius,fiducialIndex);	}			//TODO: pass in Point3d?	public Point3d getFiducialLocation(int fiducialIndex)	{	   FiducialCollectionHolder fids = getFiducialCollectionHolder();	   FiducialCollection fids2 = fids.getFiducialCollection();	   return fids2.getFiducialLocation(fiducialIndex);	}	    	public Point3d getFiducialLocation(int fiducialIndex, Point3d center)	{	    FiducialCollectionHolder fids = getFiducialCollectionHolder();	    FiducialCollection fids2 = fids.getFiducialCollection();	    return fids2.getFiducialLocation(fiducialIndex, center);	}	    	/**	 * @fiducialIndex is less than number of fiducials, greater than 0	 * @	 */		public void rotateAboutRotationAxis(double d)	{	    FiducialCollectionHolder fids = getFiducialCollectionHolder();	    fids.rotateAboutInitAxis1(d);	}		public void replaceFiducialCollection(FiducialCollection f)	{	    FiducialCollectionHolder fids = this.getFiducialCollectionHolder();	    fids.replaceFiducialCollection(f);	}		public FiducialCollection getFiducialCollection()	{	    FiducialCollectionHolder fids = this.getFiducialCollectionHolder();	    FiducialCollection fids2 = fids.getFiducialCollection();	    return (FiducialCollection)fids2.clone();	}		public void fcr1(double d)	{	    FiducialCollectionHolder fids = this.getFiducialCollectionHolder();	    FiducialCollection fids2 = fids.getFiducialCollection();	    fids2.r1(d);	}		public void fcr2(double d)	{	    FiducialCollectionHolder fids = this.getFiducialCollectionHolder();	    FiducialCollection fids2 = fids.getFiducialCollection();	    fids2.r2(d);	}		public void fcr3(double d)	{	    FiducialCollectionHolder fids = this.getFiducialCollectionHolder();	    FiducialCollection fids2 = fids.getFiducialCollection();	    fids2.r3(d);	}		public void fct1(double d)	{	    FiducialCollectionHolder fids = this.getFiducialCollectionHolder();	    FiducialCollection fids2 = fids.getFiducialCollection();	    fids2.t1(d);	}		public void fct2(double d) 	{	    FiducialCollectionHolder fids = this.getFiducialCollectionHolder();	    FiducialCollection fids2 = fids.getFiducialCollection();	    fids2.t2(d);	}		public void fct3(double d)	{	    FiducialCollectionHolder fids = this.getFiducialCollectionHolder();	    FiducialCollection fids2 = fids.getFiducialCollection();	    fids2.t3(d);	}		public double getFCT1()    {		FiducialCollectionHolder fids = this.getFiducialCollectionHolder();    		return fids.getFCT1();    }        public double getFCT2()    {    		FiducialCollectionHolder fids = this.getFiducialCollectionHolder();    		return fids.getFCT2();    }    public double getFCT3()    {    		FiducialCollectionHolder fids = this.getFiducialCollectionHolder();    		return fids.getFCT3();    }        public double getFCR1()    {    		FiducialCollectionHolder fids = this.getFiducialCollectionHolder();    		return fids.getFCR1();    }        public double getFCR2()    {    		FiducialCollectionHolder fids = this.getFiducialCollectionHolder();    		return fids.getFCR2();    }        public double getFCR3()    {    		FiducialCollectionHolder fids = this.getFiducialCollectionHolder();    		return fids.getFCR3();    }   		public void setIdealRotationAxis(double polar, double azimuthal)	{	    this.rotateAboutInitAxis1(polar);	    this.rotateAboutInitAxis2(azimuthal);	}			public void wobbleIdealAxis(double polar, double azimuthal)	{	    FiducialCollectionHolder fids = this.getFiducialCollectionHolder();	    FiducialCollection fids2 = fids.getFiducialCollection();	    fids2.rotateAboutInitAxis1(polar);	    fids2.rotateAboutInitAxis2(azimuthal);	}		public Vector3d getInitRotationAxis()	{	    FiducialCollectionHolder fids = this.getFiducialCollectionHolder();	    return fids.getInitAxis1();	}		public Vector3d getIdealRotationAxis()	{	    FiducialCollectionHolder fids = this.getFiducialCollectionHolder();	    return fids.getAxis1();	}	//TODO: implement//	public Vector3d getWobbledRotationAxis()//	{//	    //	}		public void t1(double d)	{	   this.setInitTranslation1(d);	}		public void t2(double d) 	{	    this.setInitTranslation2(d);	}		public void t3(double d)	{	    this.setInitTranslation3(d);	}		public void setNormalAxis(Vector3d axis)	{	    FiducialCollectionHolder fids = this.getFiducialCollectionHolder();		fids.setInitAxis1(axis);	}		public void setNormalAxis(double x, double y, double z)	{	    FiducialCollectionHolder fids = this.getFiducialCollectionHolder();		fids.setInitAxis1(x,y,z);	}			public String toString()	{	    FiducialCollectionHolder fids = getFiducialCollectionHolder();		String s = "";		s = s + "Rotary Stage: " +"\n";		s = s + super.toString();		s = s + "Children are: " +"\n";		s = s + fids.toString();		s = s + "\n";		return s;	}		public String tobjectProperties()	{	    String s = "";	    s = s + "RotaryStage";	    //s = s + super.tobjectProperties();	    return s;	}		public Object clone()	{	    RotaryStage newRot = RotaryStage.BuildDefault(new Point3d());	    newRot.set(this);	    return newRot;	}		public void set(RotaryStage r)	{	    super.set(r);	    FiducialCollectionHolder myFids = this.getFiducialCollectionHolder();	    FiducialCollectionHolder otherFids = r.getFiducialCollectionHolder();	    myFids.set(otherFids);	}		public void empty()	{	    FiducialCollectionHolder fids = this.getFiducialCollectionHolder();	    FiducialCollection fids2 = fids.getFiducialCollection();	    fids2.empty();	}	public static void main(String[] args)	{	    RotaryStage rs = RotaryStage.BuildDefault(new Point3d());//	    System.out.println(rs);	    rs.addFiducial(1,0,0);	    System.out.println("p1 is");	    System.out.println(rs.getFiducialLocation(0));	    //rs.fcr1(-90);	    //System.out.println("p2 is");	    //System.out.println(rs.getFiducialLocation(0));	    rs.setIdealRotationAxis(-90,-90);	    System.out.println("Axis is");	    System.out.println(rs.getIdealRotationAxis());	    System.out.println(rs.getFiducialLocation(0));	    rs.rotateAboutRotationAxis(90);	    System.out.println("New position is:");	    System.out.println(rs.getFiducialLocation(0));	    System.out.println("");	    rs.empty();	    rs.addFiducial(1,0,0);	    rs.fct3(1);	    rs.fct2(1);	    System.out.println("New position is:");	    System.out.println(rs.getFiducialLocation(0));	    //System.out.println(rs);webmail.mit.edu	    	    	    //System.out.println(rs.getIdealRotationAxis());	    //FiducialCollection fc = rs.getFiducialCollection();	    //System.out.println(fc);	    	}    /* (non-Javadoc)     * @see Simulator.TransformableObject#specialRecenter()     */    public void specialRecenter()    {        // TODO Auto-generated method stub            }}