%%Generates data for a stationary uncalibrated 2 detector system
%% This data assumes all expected detector source allignments are the same- one sdp
%% cant have different ratios than anther. Furthermore, all expected angles are the same 


clear all;
pack;
pathScript;

global gs %%outputSimulator
global gs2

%%initializing search paths


%%creates connection to local mysql database
conn = database('sensitivity', 'root', '123456',...
    'com.mysql.jdbc.Driver', 'jdbc:mysql://127.0.0.1:3306/');

%%column names array
colnames = {...
    'distance',...
        'relDistance',...
        'x',...
        'y',...
        'z',...
        'relX',...
        'relY',...
        'relZ',...
        'reconFiducials',...
        'calibFiducials',...
        'fiducialDelta',...
        'rotationSpread',...
        'rotationDelta',...
        'detectorDistance',...
        'detectorCenterDelta',...
        'detectorAngle',...
        'detectorAngleDelta',...
        'sourceDistance',...
        'sourceCenterDelta',...
        'reconOutputDelta',...
        'calibOutputDelta',...
        'date'};


calibFiducials = 1;
reconFiducials = 4;
fiducialDelta = 5000;
detectors = 2;
rotationSpread = 90;
rotationDelta = 2;
detectorDistances = [100000; 100000];
detectorDistance = detectorDistances(1);
detectorCenterDelta = 5000;
detectorAngles = [0,0,0;0,0,0];
detectorAngle = detectorAngles(1);
detectorAngleDelta = 2;
sourceDistances = [70000; 70000];
sourceDistance = sourceDistances(1);
sourceCenterDelta = 5000;
calibOutputDelta = 0;
reconOutputDelta = 0;

trialsPerSet = 5;


%%varying simulation parameters
reconOutputDeltas = [0];
calibOutputDeltas = [0];
calibFiducialss = [13, 20, 40];


%%looping over all varying parameters
for i=1:size(reconOutputDeltas, 2)
    reconOutputDelta = reconOutputDeltas(i);
    for j=1:size(calibOutputDeltas, 2)
        calibOutputDelta = calibOutputDeltas(j);
        for k=1:size(calibFiducialss,2)
            calibFiducials = calibFiducialss(k);

            %%First, we form the query for the data we intend to
            %%insert into database, to check if we ahve neoguh
            %%trials already

            query = ['SELECT count(distance)',...
                ' FROM cssu_rssu where ',...
                        ' reconFiducials = ', num2str(reconFiducials, 9),...
                        ' AND calibFiducials = ', num2str(calibFiducials, 9),...
                        ' AND fiducialDelta = ', num2str(fiducialDelta, 9),...
                        ' AND rotationSpread = ', num2str(rotationSpread, 9),...
                        ' AND rotationDelta = ', num2str(rotationDelta, 9),...
                        ' AND detectorDistance = ', num2str(detectorDistance, 9),...
                        ' AND detectorCenterDelta = ', num2str(detectorCenterDelta, 9),...
                        ' AND detectorAngle = ', num2str(detectorAngle, 9),...
                        ' AND detectorAngleDelta = ', num2str(detectorAngleDelta, 9),...
                        ' AND sourceDistance = ', num2str(sourceDistance, 9),...
                        ' AND sourceCenterDelta = ', num2str(sourceCenterDelta, 9),...
                        ' AND reconOutputDelta = ', num2str(reconOutputDelta, 9),...
                        ' AND calibOutputDelta = ', num2str(calibOutputDelta, 9)...
                ];


            curs = exec(conn, query);

            %%curs.message
            dat = fetch(curs);
            %%dat.message
            formedData = cell2Mat(dat.data);
            %% formedDat
            for i = formedData + 1:trialsPerSet
                %%if the amount of data in the database for this
                %%query is less than trials per set, run the
                %%remaining number of simulations

                [simulatedValues, actualCalibratedSystem, expectedCalibratedSystem] = ...
                    simulateAndReconstruct1(...
                    calibFiducials,...
                    fiducialDelta,...
                    detectors,...
                    rotationSpread,...
                    rotationDelta,...
                    detectorDistances,...
                    detectorCenterDelta,...
                    detectorAngles,...
                    detectorAngleDelta,...
                    sourceDistances,...
                    sourceCenterDelta,...
                    calibOutputDelta...
                    );

               [simulatedValues, actualCalibratedSystem, expectedCalibratedSystem] = ...
                simulateAndReconstruct2(...
                actualCalibratedSystem,...
                expectedCalibratedSystem,...
                fiducialDelta,...
                reconFiducials,...
                reconOutputDelta);
                
                 %% harvesting data from the simulation
                distance = actualCalibratedSystem.getElectrodeLocation().distance...
                    (expectedCalibratedSystem.getElectrodeLocation());

                relDistance = actualCalibratedSystem.getElectrodeLocationRelativeToFiducialFrame().distance...
                    (expectedCalibratedSystem.getElectrodeLocationRelativeToFiducialFrame());

                x = actualCalibratedSystem.getElectrodeLocation().x...
                    - (expectedCalibratedSystem.getElectrodeLocation().x);

                y = actualCalibratedSystem.getElectrodeLocation().y...
                    - (expectedCalibratedSystem.getElectrodeLocation().y);

                z = actualCalibratedSystem.getElectrodeLocation().z....
                    - (expectedCalibratedSystem.getElectrodeLocation().z);

                relX = actualCalibratedSystem.getElectrodeLocationRelativeToFiducialFrame().x...
                    - (expectedCalibratedSystem.getElectrodeLocationRelativeToFiducialFrame().x);

                relY = actualCalibratedSystem.getElectrodeLocationRelativeToFiducialFrame().y...
                    - (expectedCalibratedSystem.getElectrodeLocationRelativeToFiducialFrame().y);

                relZ = actualCalibratedSystem.getElectrodeLocationRelativeToFiducialFrame().z...
                    - (expectedCalibratedSystem.getElectrodeLocationRelativeToFiducialFrame().z);

                date = datestr(now, 31);
                clear gs;
                clear gs2;
                clear expectedCalibratedSystem;
                clear actualCalibratedSystem;
                clear simulatedvalues;
                pack;


                %%only add to the database if were dealing with
                %%non zero errors
                if (distance~=0)

                    %%column values
                    exdata = {...
                        distance,...
                                                            relDistance,...
                                                            x,...
                                                            y,...
                                                            z,...
                                                            relX,...
                                                            relY,...
                                                            relZ,...
                                                            reconFiducials,...
                                                            calibFiducials,...
                                                            fiducialDelta,...
                                                            rotationSpread,...
                                                            rotationDelta,...
                                                            detectorDistance,...
                                                            detectorCenterDelta,...
                                                            detectorAngle,...
                                                            detectorAngleDelta,...
                                                            sourceDistance,...
                                                            sourceCenterDelta,...
                                                            reconOutputDelta,...
                                                            calibOutputDelta,...
                                                            date};

                    close(curs);

                    %inserting data into database
                    insert(conn, 'cssu_rssu', colnames, exdata);
                else
                    close(curs);

                end
            end
        end
    end
end

