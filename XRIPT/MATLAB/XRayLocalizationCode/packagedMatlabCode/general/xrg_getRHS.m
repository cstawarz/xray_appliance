function [RHS_Simulated] = xrg_getRHS(system)
%% xrg_getRHS: get the RHS that would be produced by an XRAY system with n detectors. 
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% function [RHS_Simulated] = xrg_getRHS(system)
%
% 
% Given a system with n detectors, returns a verbose struct describing the simulated RHS
% that would be output by the system
%
% Note that this verbose struct doesnt
% store actual images or filenames, from which features are extracted (as in feature
% extraction, detIm_formRHS_Verbose) since there are no actual images, only smulated projection
% points. 
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% 
% Inputs:
%
% system: XRAYSystem whose expectedProjections we want to see. 
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Outputs:
%
% RHS_Simulated: 
% struct that saves: 
%
% RHS_Simulated.detectori.fiducialjProjection.x||y-
% More specific information about where each fiducial should projected on each
% detector- For example, one could call RHS_Simulated.detector1.fiducial1.x to get the
% column of the simulated first extracted projection point from the detector1 image. 
%
% RHS_Simulated.RHS-
% vector of detector row, column projectino point values, to be used in calibration, 
% reconstruction, etc. See readme.doc on feature extraction
%
% RHS_Simulated.RHS is of the form :
%         *[pf1_x_d1, //centerOfProjection of fid1, x coordinate, onto detector 1, 
%          * pf1_y_d1, //centerOfProjection of fid1, y coordinate, onto detector 1, 
%          * pf2_x_d1  //centerOfProjection of fid2, x coordinate, onto detector 1,    
%          * pf2_y_d1  //centerOfProjection of fid2, y coordinate, onto detector 1, 
%          * pfn_x_d1, //centerOfProjection of fidn, x coordinate, onto detector 1, 
%          * pfn_y_d1, //centerOfProjection of fidn, y coordinate, onto detector 1, 
%          *
%          * pf1_x_d2, //centerOfProjection of fid1, x coordinate, onto detector 2,
%          * pf1_y_d2, //centerOfProjection of fid1, y coordinate, onto detector 2,
%          * pf2_x_d2,   
%          * pf2_y_d2,...
%          * pfn_x_d2,
%          * pfn_y_d2,É 
%          * É
%          * pf1_x_dn, //centerOfProjection of fid1, x coordinate, onto detector n,
%          * pf1_y_dn, //centerOfProjection of fid1, y coordinate, onto detector n,
%          * pf2_x_dn,   
%          * pf2_y_dn,...
%          * pfn_x_dn,
%          * pfn_y_dn].
%
% RHS_Simulated.RHS is in 0 indexing form, rather than matlabs 1 indexing form
%
% RHS_Simulated.RHSMatlabIndexing-
% RHS in 1 indexed form
%

RHS = system.getIdealCentersOfProjection(); %%this is the xray system method that returns the vector of output, for an n detector system, in 0 indexed coords
RHS_Simulated.RHS = RHS;
valuesPerDetector = system.getNumberOfFiducials()*2; %%the number of projection values per detector- each fiducial projection generates 2 values- a row and column

%% the struct needs to contain elements like
%% RHS_simulated.detector1.fiducial3Projection.x and
%% RHS_simulated.detector3.fiducial2Projection.y

%%looping over every detector
for i = 1:system.getNumberOfSDP()
    RHSPerDet = RHS(1+valuesPerDetector*(i-1):valuesPerDetector*i); %%the RHS generated by the ith detector
    %%intializaing the RHSimulated.detector1, RHSSimulated.detector2...
    %%etc struct
    detectorString = ['detector', num2str(i)];
%     RHSSimulated.(detectorString) = []
    
    %%looping over ever set of x,y projection points for a fiducial
    for j = 1:length(RHSPerDet)/2
        projectionPointStruct.x = RHSPerDet(2*(j-1)+ 1,1);
        projectionPointStruct.y = RHSPerDet(2*(j-1)+ 2,1);
        fiducialString = ['fiducial', num2str(j), 'Projection'];
        RHS_Simulated.(detectorString).(fiducialString) = projectionPointStruct; %%dynamic field name
    end

    %%storing the pixel sizes and detector sizes associated with a
    %%simulated RHS
    pixelSize = xrg_getPixelSize(system,i);
    detectorSize = xrg_getDetectorSize(system,i);
    RHS_Simulated.(detectorString).pixelHeight  = pixelSize(1);
    RHS_Simulated.(detectorString).pixelWidth   = pixelSize(2);
    RHS_Simulated.(detectorString).detectorRows = detectorSize(1);
    RHS_Simulated.(detectorString).detectorCols = detectorSize(2);   
end


RHS_Simulated.RHSMatlabIndexing = RHS + 1;




